type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.regex.Pattern;

    public class Contact {

        private String name;
        private String phoneNumber = "";
        private LocalDateTime createdTime;
        private LocalDateTime lastEditTime;

        Contact() {
            this.createdTime = LocalDateTime.now();
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public void setPhoneNumber(String phoneNumber) {
            if (isPhoneNumberValid(phoneNumber)) {
                this.phoneNumber = phoneNumber;
            } else {
                this.phoneNumber = "[no number]";
                System.out.println("Wrong number format!");
            }
        }

        public LocalDateTime getCreatedTime() {
            return createdTime;
        }

        public void setCreatedTime(LocalDateTime createdTime) {
            this.createdTime = createdTime;
        }

        public LocalDateTime getLastEditTime() {
            return lastEditTime;
        }

        public void setLastEditTime(LocalDateTime lastEditTime) {
            this.lastEditTime = lastEditTime;
        }

        public String toShortString() {
            return this.getName();
        }

        protected String getFormattedDate(String localDateTime) {
            return LocalDateTime.parse(localDateTime, DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm")).toString();
        }

        private boolean isPhoneNumberValid(String phoneNumber) {
            Pattern pattern = Pattern.compile("^\\+?(\\(\\w+\\)|\\w+[ -]\\(\\w{2,}\\)|\\w+)([ -]\\w{2,})*");
            return pattern.matcher(phoneNumber).matches();
        }
    }
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;
    import java.time.temporal.ChronoUnit;

    public class Organization extends Contact {

        private String address;

        Organization() {}

        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
            setLastEditTime(LocalDateTime.now());
        }

        @Override
        public String toString() {
            return "Organization name: " + this.getName() + "\n"
                    + "Address: " + this.getAddress() + "\n"
                    + "Number: " + this.getPhoneNumber() + "\n"
                    + "Time created: " + this.getCreatedTime().truncatedTo(ChronoUnit.MINUTES) + "\n"
                    + "Time last edit: " + this.getLastEditTime().truncatedTo(ChronoUnit.MINUTES);
        }
    }
  learner_created: true
- name: src/contacts/ContactBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;

    public class ContactBook {
        private final ArrayList<Contact> listOfContacts = new ArrayList<>();

        public boolean isEmpty() {
            return listOfContacts.isEmpty();
        }

        public int size() {
            return listOfContacts.size();
        }

        public void addPerson(Person person) {
            listOfContacts.add(person);
        }

        public void addOrganization(Organization organization) {
            listOfContacts.add(organization);
        }

        public void editContact(int index, String field, String value) {
            Contact contact = listOfContacts.get(index);
            if (contact instanceof Person) {
                editPerson((Person) contact, field, value);
            } else {
                editOrganization((Organization) contact, field, value);
            }
        }

        public void removeContact(int index) {
            if (listOfContacts.size() > index) {
                listOfContacts.remove(index);
                System.out.println("The record removed!");
            } else {
                System.out.println("The is no such contact!");
            }
        }

        public void count() {
            System.out.printf("The Phone Book has %d records.%n", listOfContacts.size());
        }

        public void info() {
            int counter = 1;
            for (Contact contact : listOfContacts) {
                System.out.printf("%d. %s%n", counter, contact.toShortString());
                counter++;
            }
        }

        public void printDetailedInfo(int index) {
            if (listOfContacts.size() > index) {
                Contact contact = listOfContacts.get(index);
                System.out.println(contact.toString());
            } else {
                System.out.println("The is no such contact!");
            }
        }

        public Contact getContact(int index) {
            return listOfContacts.get(index);
        }

        private void editPerson(Person person, String field, String value) {
            switch (field) {
                case "name":
                    person.setName(value);
                    System.out.println("The record updated!");
                    break;
                case "surname":
                    person.setSurname(value);
                    System.out.println("The record updated!");
                    break;
                case "birth":
                    person.setBirthDate(value);
                    System.out.println("The record updated!");
                    break;
                case "gender":
                    person.setGender(value);
                    System.out.println("The record updated!");
                    break;
                case "number":
                    person.setPhoneNumber(value);
                    System.out.println("The record updated!");
                    break;
                default:
                    System.out.println("There is no such field!");
            }
        }

        private void editOrganization(Organization organization, String field, String value) {
            switch (field) {
                case "name":
                    organization.setName(value);
                    System.out.println("The record updated!");
                    break;
                case "address":
                    organization.setAddress(value);
                    System.out.println("The record updated!");
                    break;
                case "number":
                    organization.setPhoneNumber(value);
                    System.out.println("The record updated!");
                    break;
                default:
                    System.out.println("There is no such field!");
            }
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeParseException;
    import java.time.temporal.ChronoUnit;

    public class Person extends Contact {

        private String surname;
        private String birthDate;
        private String gender;

        Person() {}

        public String getSurname() {
            return surname;
        }

        public void setSurname(String surname) {
            this.surname = surname;
            setLastEditTime(LocalDateTime.now());
        }

        public String getBirthDate() {
            return birthDate;
        }

        public void setBirthDate(String birthDate) {
            try {
                this.birthDate = this.getFormattedDate(birthDate);
            } catch (DateTimeParseException e) {
                System.out.println("Bad birth date!");
                this.birthDate = "[no data]";
            }
            setLastEditTime(LocalDateTime.now());
        }

        public String getGender() {
            return gender;
        }

        public void setGender(String gender) {
            boolean isMatch = gender.matches("[MF]");
            if (isMatch) {
                this.gender = gender;
            } else {
                System.out.println("Bad gender!");
                this.gender = "[no data]";
            }
            setLastEditTime(LocalDateTime.now());
        }

        public String toShortString() {
            return this.getName() + " " + this.getSurname();
        }

        public String toString() {
            return "Name: " + this.getName() + "\n"
                + "Surname: " + this.getSurname() + "\n"
                + "Birth date: " + this.getBirthDate() + "\n"
                + "Gender: " + this.getGender() + "\n"
                + "Number: " + this.getPhoneNumber() + "\n"
                + "Time created: " + this.getCreatedTime().truncatedTo(ChronoUnit.MINUTES) + "\n"
                + "Time last edit: " + this.getLastEditTime().truncatedTo(ChronoUnit.MINUTES);
        }
    }
  learner_created: true
- name: phoneBook.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5327#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 14 Jan 2022 14:48:07 UTC
record: 4
